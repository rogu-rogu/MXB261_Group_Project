function samples = Orthogonal_Sampling(n,d)
% ORTHOGONAL_SAMPLING - Generates well-distributed parameter values using
% Orthogonal Sampling.
%
%   samples = Orthogonal_Sampling(n,d) divides the d-dimensional space 
%   where all dimensions are ∈[0,1], into n many subspaces of side length 
%   p (d-th root of n). It further divides the subspaces into intervals 
%   p^(d-1) and assigns one sample to each subspace; such that the Latin 
%   Hypercube requirements are satisfied for both samples within subspaces, 
%   and subspaces within the overall space.
%
%   Input Arguments
%     n - integer, in power series of d
%       Number of samples to generate. To construct the hypercube
%       subspaces, the d-th root of n must be a positive integer.
%     d - integer
%       Number of dimensions, where each dimension corresponds to a
%       parameter ranging from 0 to 1.
%
%   Output Arguments
%     samples - (n x d) double matrix
%       d*n many random samples generated by Orthogonal Sampling. The
%       columns contain the parameter values of each sample.

%% Orthogonal Sampling
% Informed by the procedure developed in "Populations of models, 
% Experimental Designs and coverage of parameter space by Latin Hypercube 
% and Orthogonal Sampling"; K. Burrage, P. Burrage, D. Donovan, B. Thompson
% doi: 10.1016/j.procs.2015.05.383

% Initialising -----------------------------------------------------------]
p = nthroot(n,d); % Number of subspace intervals
if floor(p)~=p, error("n must have a positive integer d-th root. "...
+ sprintf("Try using nthroot(n,d) to check if it is an integer.")), end
m = n/p; % Number of sample intervals (within subspaces)
subscale = 0:(1/p):1; subscale(end) = []; % Marks the beginning position...
%...of p many Latin intervals in ∈[0,1]. Positions subspaces in space
samplescale = 0:(1/m):1; samplescale(end) = []; % As above, but marks...
%...m many Latin intervals. Positions samples within a subspace

% Constructs an organised list of subspaces ------------------------------]
subco = 1:p; % Range of subspace positions within the space
subspaces = zeros(n,d); % List of subspace indexes
for i = 1:d % Generates all possible d-tuples
    val = repelem(subco, p^(i-1)); % Repeats elements in the vector subco
    subspaces(:,i) = repmat(val,1,n/(p^i)); % Repeats above vector to fit
end

% Isolates hyperplanes of subspaces --------------------------------------]
hyperplanes = false(n,d,p);
for i = subco, hyperplanes(:,:,i) = subspaces == i; end
% Locates i in subspaces, isolating the hyperplane where parameter == i

% Assigns samples within subspaces according to LHS ----------------------]
samplespaces = zeros(n,d);
for i = subco % Loops through hyperplanes of subpaces
    for j = 1:d % Loops through parameters
        val = randperm(m); % Assign random positions with no duplicates
        samplespaces(hyperplanes(:,j,i),j) = val;
    end
end

% Generates random samples -----------------------------------------------]
u = rand(n,d); % Generates uniform random numbers (3*n for 3D)
% Shrinks values into a (1/m) sidelength hypercube
u_subspace = u/m + samplescale(samplespaces); % Shrinks values into a...
%...(1/m) sidelength hypercube, then shifts values into their intervals, 
% positions samples within a subspace
u_space = u_subspace/p; % Shrinks values into a subspace ((1/m) hypercube)
u_space = u_space + subscale(subspaces); % Shifts subspaces into position

samples = u_space;
end